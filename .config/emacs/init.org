#+title: Emacs config file
#+PROPERTY: header-args:emacs-lisp :tangle yes :mkdirp yes

* Preamble

This is an org-mode file that is used in the creation of emacs [[file:init.el][init.el]] file

This is for the .el file
#+begin_src emacs-lisp :tangle yes

      ;; Garbage Collection
    (setq gc-cons-threshold (* 50 1000 1000))
	  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
	  ;;       in Emacs and init.el will be generated automatically!
(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                   (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src

** Some informaion
I will Document this as well as I can including links to the projects

* Setting up the Package System
Emacs is a very customizable program and part of that is packages that you can install we will start by setting this up [[https://github.com/jwiegley/use-package][use-package]]

#+begin_src emacs-lisp :tangle yes 
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

** No Littering to keep the configuration file clean
#+begin_src emacs-lisp :tangle yes
;; NOTE: If you want to move everything out of the ~/.emacs.d folder
;; reliably, set `user-emacs-directory` before loading no-littering!
;(setq user-emacs-directory "~/.cache/emacs")

(use-package no-littering)

;; no-littering doesn't set this by default so we must place
;; auto save files in the same path as it uses for sessions
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src
* Basic UI Setup

This makes the Emacs UI look more modern as well as better usability

#+begin_src emacs-lisp :tangle yes
    ;; Disables the startup message
    (setq inhibit-startup-message t)

    (scroll-bar-mode -1)        ; Disable visible scrollbar
    (tool-bar-mode -1)          ; Disable the toolbar
    (tooltip-mode -1)           ; Disable tooltips
    (set-fringe-mode 10)        ; Give some breathing room
    (menu-bar-mode -1)            ; Disable the menu bar

      ;; Set up the visible bell
      (setq visible-bell t)

      (set-face-attribute 'default nil :font "Monoid Nerd Font" :height 100)
      (visual-line-mode t)

      ;; Make ESC quit prompts
      (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

      (column-number-mode)
      (global-display-line-numbers-mode t)

      ;;Disable line numbers for some modes
      (dolist (mode '(org-mode-hook
                      term-mode-hook
                        treemacs-mode-hook
                      shell-mode-hook
		        vterm-hook
                      eshell-mode-hook))
        (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src
** Keeps the init file from getting emacs auto generated lines added that would get overridden latter
#+begin_src emacs-lisp :tangle yes
;; Move custom-set-varialbes to new file
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file 'noerror)
#+end_src

* UI packages
These are Packages that are mainly for the UI 
** DOOM Themes
This is a Repository of emacs themes that were created for DOOM emacs but can be used for our purpeses [[https://github.com/karetsu/emacs-doom-themes][Doom Themes]]
#+begin_src emacs-lisp :tangle yes
;; Install doom themes
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-dracula t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)
  
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(load-theme 'doom-dracula)
#+end_src

** DOOM Modeline
This is a fancy minimal modeline for emacs [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]
#+begin_src emacs-lisp :tangle yes
;; Install better bottom bar
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src
** All the Icons
*First time you must use* M-x all-the-icons-install-fonts In order to install the icons [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] + [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]]
#+begin_src emacs-lisp :tangle yes
;; Icons you have to run M-x all-the-icons-install-fonts
(use-package all-the-icons)
; :if (display-graphics-p)
; :commands (all-the-icons-install-fonts))
 ; :init
 ; (unless (find-font (font-spec :name "all-the-icons"))
 ;   (all-the-icoons-install-fonts t)))
(use-package all-the-icons-dired
 ; :if (display-graphics-p)
  :hook (dired-mode . all-the-icons-dired-mode))
#+end_src
** Rainbow delimiters
or rainbow parentheses. this will make it easer to see which opening and closing parentheses are for which to help make sure that they match [[https://github.com/Fanael/rainbow-delimiters][rainbow delimiters]]
#+begin_src emacs-lisp :tangle yes
;; Rainbow Delimiters aka colorful ()
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Beacon
this is desighned to make your curser blink when scrolling so you don't loose it [[https://github.com/Malabarba/beacon][beacon]]
#+begin_src emacs-lisp :tangle yes
;; Keep track of the curser while scrolling
(use-package beacon)
(beacon-mode t)
#+end_src

* Emacs Improvements
These are improvements for searching everything from files to keybindings
** Ivy
This is a interactive interface for emacs completion [[https://oremacs.com/swiper/][swiper ivy]]
#+begin_src emacs-lisp :tangle yes
;; Better search and mini buffer
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
#+end_src
** Ivy rich
Better UI for IVY and counsel [[https://github.com/Yevgnen/ivy-rich][Ivy Rich]]
#+begin_src emacs-lisp :tangle yes
  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))
#+end_src
** Counsel
This helps find common emacs commands [[https://github.com/abo-abo/swiper#counsel][counsel]]
#+begin_src emacs-lisp :tangle yes
;; Better M-x and search
(use-package counsel
  :bind (("M-x" . counsel-M-x)
	 ("C-x b" . counsel-ibuffer)
	 ("C-x C-f" . counsel-find-file)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history))
  :config
  (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^
#+end_src
** Which key
This is show what keybidings are attached to certain commands [[https://github.com/justbur/emacs-which-key][which key]]
#+begin_src emacs-lisp :tangle yes
  ;; shows keybindings and what they use
  (use-package which-key
  :defer 0
    ; :init (which-key-mode)
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.3)) ; time delay for popups
#+end_src
** Helpful
this is a better help program than the one built into emacs [[https://github.com/Wilfred/helpful][helpful]]
#+begin_src emacs-lisp :tangle yes
  ;; Better help program
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src
** general
better keybindings [[https://github.com/noctuid/general.el][general]]
#+begin_src emacs-lisp :tangle yes
(use-package general
 :config
  (general-evil-setup t)

(general-create-definer rune/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")
(rune/leader-keys
  "t" '(:ignore t :which-key "toggles")
  "tt" '(counsel-load-theme :which-key "choose theme")))

(general-define-key
 "C-M-j" 'counsel-switch-buffer)
#+end_src
** Hydra
more keybindings but on a short timer [[https://github.com/abo-abo/hydra][hydra]]
#+begin_src emacs-lisp :tangle yes
  (use-package hydra
    :defer t) 
    
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (rune/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src
** auto-package-update
This will auto update Emacs packages [[https://github.com/rranelli/auto-package-update.el][Auto Package Update]]
#+begin_src emacs-lisp :tangle yes
;; auto update packages
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results nil)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src
** Projectile
Better intergration of projects to move closer to an IDE [[https://projectile.mx/][projectile]]
#+begin_src emacs-lisp :tangle yes
  ;; commands for using and testing and running project
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Dropbox/Projects")
      (setq projetile-project-search-path '("~/Dropbox/Projects")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
     :after projectile
     :config (counsel-projectile-mode))
#+end_src

* Evil aka Vim keys
This is vi layer that makes typing in emacs easier by giving it vim keybindings [[https://www.emacswiki.org/emacs/Evil][EVIL]] [[https://evil.readthedocs.io/en/latest/overview.html#installation-via-package-el][The Official Documentation]]
** evil
This is the main package
#+begin_src emacs-lisp :tangle yes
(use-package evil
  :init
  (setq evil-want-intergration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  ;:hook (evil-mode . rune/evil-hook)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src
** evil collection
Some improvements to the evil keybinds [[https://github.com/emacs-evil/evil-collection][evil collection]]
#+begin_src emacs-lisp :tangle yes
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src

* Magit
A git client within Emacs [[https://magit.vc/][magit]]
#+begin_src emacs-lisp :tangle yes
  ;;magit
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
  ;;(use-package evil-magit
  ;;after magit)

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
#+end_src
** Forge
Better support for github gitlab [[https://emacsair.me/2018/12/19/forge-0.1/][forge]]
#+begin_src emacs-lisp :tangle yes
  (use-package forge
    :after magit)
#+end_src

* Org-mode
Note taking and main reason why most people start using emacs [[https://orgmode.org/][org-mode]]
#+begin_src emacs-lisp :tangle yes
    (defun efs/org-font-setup ()
      ;; Replace list hyphen with dot
      (font-lock-add-keywords 'org-mode
                              '(("^ *\\([-]\\) "
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))

  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :commands (org-capture org-agenda)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/Dropbox/OrgFiles/Task.org"))

     (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

      (setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
        ("tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("@errand" . ?E)
         ("@home" . ?H)
         ("@work" . ?W)
         ("agenda" . ?a)
         ("planning" . ?p)
         ("writing" . ?w)
         ("batch" . ?b)
         ("note" . ?n)
         ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work-email")

      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
       ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
              ((org-agenda-overriding-header "In Review")
               (org-agenda-files org-agenda-files)))
        (todo "PLAN"
              ((org-agenda-overriding-header "In Planning")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
              ((org-agenda-overriding-header "Project Backlog")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "READY"
              ((org-agenda-overriding-header "Ready for Work")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Projects")
               (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
              ((org-agenda-overriding-header "Completed Projects")
               (org-agenda-files org-agenda-files)))
        (todo "CANC"
              ((org-agenda-overriding-header "Cancelled Projects")
               (org-agenda-files org-agenda-files)))))))

      (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp "~/Dropbox/OrgFiles/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
             (file+olp+datetree "~/Dropbox/OrgFiles/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
        ("jm" "Meeting" entry
             (file+olp+datetree "~/Dropbox/OrgFiles/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

        ("w" "Workflows")
        ("we" "Checking Email" entry (file+olp+datetree "~/Dropbox/OrgFiles/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

        ("m" "Metrics Capture")
        ("mw" "Weight" table-line (file+headline "~/Dropbox/OrgFiles/Metrics.org" "Weight")
         "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))
  
    (efs/org-font-setup))

  (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))


  ;; `with-eval-after-load' macro was introduced in Emacs 24.x
  ;; In older Emacsen, you can do the same thing with `eval-after-load'
  ;; and '(progn ..) form.
  (with-eval-after-load 'org       
    (setq org-startup-indented t) ; Enable `org-indent-mode' by default
    (add-hook 'org-mode-hook #'visual-line-mode))
#+end_src
** Org Bullets
Show Bullets instead of increnental astrix [[https://github.com/sabof/org-bullets][org bullets]]
#+begin_src emacs-lisp :tangle yes
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode))
  ;:custom
  ;(org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

;;(defun efs/org-mode-visual-fill ()
;;  (setq visual-fill-column-width 100
;;        visual-fill-column-center-text t)
;;  (visual-fill-column-mode 1))

;;(use-package visual-fill-column
;;  :hook (org-mode . efs/org-mode-visual-fill))
#+end_src
** exicute code in org files
#+begin_src emacs-lisp :tangle yes
    ;; exicute code in org files
(with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))

    ;; Add standerd .conf to org mode and emacs
    (push '("conf-unix" . conf-unix) org-src-lang-modes)

  (setq org-confirm-babel-evaluate nil))
#+end_src
** enable templates for running code within org-mode
#+begin_src emacs-lisp :tangle yes
  ;; Templates to run code within org mode
(with-eval-after-load 'org
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

* LSP Programming IDE
Turn emacs into and IDE [[https://emacs-lsp.github.io/lsp-mode/][LSP]] 
#+begin_src emacs-lisp :tangle yes
      (defun efs/lsp-mode-setup ()
      (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
      (lsp-headerline-breadcrumb-mode))

    (use-package lsp-mode
      :commands (lsp lsp-deferred)
      :hook (lsp-mode . efs/lsp-mode-setup)
      :init
      (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
      :config
      (lsp-enable-which-key-integration t))

    (use-package lsp-ui
      :hook (lsp-mode . lsp-ui-mode)
      :custom
      (lsp-ui-doc-position 'bottom))
    (use-package lsp-treemacs
      :after lsp)

    (use-package lsp-ivy
      :after lsp-mode)
#+end_src
** Typescript
This is for typescript
run this
npm install -g typescript-language-server typescript

#+begin_src emacs-lisp :tangle yes
(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))
#+end_src
** Company Mode

#+begin_src emacs-lisp :tangle yes
(use-package company
  :after lsp
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))
#+end_src

** Commenting
 #+begin_src emacs-lisp :tangle yes
   (use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))
 #+end_src

** Python

must install this package in Linux terminal
pip install --user "python-language-server[all]"
pip install --user pytest

#+begin_src emacs-lisp :tangle yes
(use-package python-mode
  :ensure t
  :hook (python-mode . lsp-deferred)
  :custom
  ;; NOTE: Set these if Python 3 is called "python3" on your system!
  ;; (python-shell-interpreter "python3")
  ;; (dap-python-executable "python3")
  (dap-python-debugger 'debugpy)
  :config
  (require 'dap-python))
#+end_src
*** pyvenv
This is a Virtual environment for Python
#+begin_src emacs-lisp :tangle yes
  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))
#+end_src

*** dap

#+begin_src emacs-lisp :tangle yes
  (use-package dap-mode
    ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;; :custom
    ;; (lsp-enable-dap-auto-configure nil)
    ;; :config
    ;; (dap-ui-mode 1)

    :commands 'dap-debug
    :config
    ;; Set up Node debugging
    (require 'dap-node)
    (dap-node-setup) ;; Automatically installs Node debug adapter if needed

    ;; Bind `C-c l d` to `dap-hydra` for easy access
    (general-define-key
      :keymaps 'lsp-mode-map
      :prefix lsp-keymap-prefix
      "d" '(dap-hydra t :wk "debugger")))
#+end_src

* Terminal Play

#+begin_src emacs-lisp :tangle yes

  (use-package term
    :commands term
    :config
    (setq explicit-shell-file-name "zsh") ;; Change this to zsh, etc
    ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package eterm-256color
  :hook (term-mode . eterm-256color-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package vterm
  :commands vterm
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
  ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
  (setq vterm-max-scrollback 10000))
#+end_src

#+begin_src emacs-lisp :tangle yes
;; for use in Windows
  (when (eq system-type 'windows-nt)
    (setq explicit-shell-file-name "powershell.exe")
    (setq explicit-powershell.exe-args '()))
#+end_src

#+begin_src emacs-lisp :tangle yes
  (defun efs/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell
    :hook (eshell-first-time-mode . efs/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))


  (use-package eshell-git-prompt
    :after eshell)

#+end_src

* Dired

#+begin_src emacs-lisp :tangle yes
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))
#+end_src


* Writing
#+begin_src emacs-lisp :tangle yes
    (use-package flycheck
    :ensure t
  :init (global-flycheck-mode))


  ;; enable ispell
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
#+end_src

* runtime perfomance

Dial the Garbage Collection down we turn it up while launching emacs to speed up launching it
#+begin_src emacs-lisp :tangle yes
  ;; Make gc pauses faster by decreasing the threshold.
   (setq gc-cons-threshold (* 2 1000 1000))
#+end_src
